from fastapi.testclient import TestClient
from app.ollama.test import app

client = TestClient(app)

def test_empty_messages():
    response = client.post("/chat/stream", json={"model": "mistral", "messages": []})
    assert response.status_code == 200
    assert "[–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]" in response.content.decode("utf-8")


def test_prompt_generation():
    from app.ollama.test import messages_to_prompt
    messages = [
        {"role": "system", "content": "–¢—ã —Ñ–∏–ª–æ—Å–æ—Ñ."},
        {"role": "user", "content": "–ß—Ç–æ —Ç–∞–∫–æ–µ —Å–æ–∑–Ω–∞–Ω–∏–µ?"}
    ]
    prompt = messages_to_prompt(messages)
    assert "–¢—ã —Ñ–∏–ª–æ—Å–æ—Ñ" in prompt
    assert "User: –ß—Ç–æ —Ç–∞–∫–æ–µ —Å–æ–∑–Ω–∞–Ω–∏–µ?" in prompt
    assert prompt.endswith("Assistant:")


def test_stream_response():
    response = client.post("/chat/stream", json={
        "model": "mistral",
        "messages": [
            {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫."},
            {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç!"}
        ]
    })

    content = response.content.decode("utf-8")
    full_answer = "".join([
        line.removeprefix("data: ").strip()
        for line in content.splitlines()
        if line.startswith("data: ")
    ])

    print("üí¨ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:")
    print(full_answer)



def test_messages_to_prompt_memory_and_instructions():
    messages = [
        {"role": "system", "content": "–¢—ã –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç."},
        {"role": "system", "content": "–ü–∞–º—è—Ç—å: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∏—Ç Python."},
        {"role": "user", "content": "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é?"},
    ]
    from app.ollama.test import messages_to_prompt
    prompt = messages_to_prompt(messages)
    assert "[–ò–ù–°–¢–†–£–ö–¶–ò–Ø]" in prompt
    assert "–ü–∞–º—è—Ç—å: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∏—Ç Python" in prompt
    assert "User: –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é?" in prompt
